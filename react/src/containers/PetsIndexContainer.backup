import React, { Component }  from 'react';
import PetTile from '../components/PetTile';

class PetsIndexContainer extends Component {
  constructor(props) {
    super(props);
    this.state = {
      pets: [],
      zipCode: '',
      sex: '',
      type: ''
    }
    this.retrievePets = this.retrievePets.bind(this);
    this.updateZipCode = this.updateZipCode.bind(this);
    this.updateSex = this.updateSex.bind(this);
    this.updateType = this.updateType.bind(this);
    this.filterZipCode = this.filterZipCode.bind(this);
    this.filterType = this.filterZipCode.bind(this);
    this.filterSex = this.filterSex.bind(this);
    this.runFiltering = this.runFiltering.bind(this);
  }


  updateZipCode(event) {
    console.log("updated zipcode");
    this.setState({ zipCode: event.target.value });
  }

  updateSex(event){
    console.log('updated sex')
    this.setState({ sex: event.target.value })
  }

  updateType(event){
    console.log('updated type')
    this.setState({ type: event.target.value })
  }

  retrievePets() {
    $.ajax({
      url: '/api/v1/pets/',
      contentType: 'application/json'
    })
    .done(data => {
      this.setState({ pets: data });
    });
  }

  componentDidMount() {
    this.retrievePets();
  }

  filterZipCode(state){
    let filteredPets = state.filter(
      (pet) => {
        return pet.location.toLowerCase().indexOf(this.state.zipCode.toLowerCase()) !== -1;
      }
    );
    return filteredPets;
  }

  filterType(petsToFilter){
    let petsToFilter = petsToFilter.filter(
      (pet) => {
        if(this.state.type === "Dog"){
          return pet.animal === "Dog"
        }else if(this.state.type === "Cat"){
          return pet.animal === "Cat"
        }else{
          return pet
        }
      }
    );
    return petsToFilter;
  }

  filterSex(petsToFilter){
    let petsToFilter = petsToFilter.filter(
      (pet) => {
        if(this.state.sex === "male"){
          return pet.sex === "male"
        }else if(this.state.sex === "female"){
          return pet.sex === "female"
        }else{
          return pet
        }
      }
    );
    return petsToFilter;
  }

  runFiltering(state){
    let results = filterZipCode(state)
    results = filterType(results)
    results = filterSex(results)
    return results;
  }

  render() {

  let filter = runFiltering(this.state.pets).map(pet => {
    if(pet.sex == 'M') pet.sex = "male";
    if(pet.sex == 'F') pet.sex = "female";
    if (pet.size == "S") {
      pet.size = "small"
    } else if (pet.size == "M") {
      pet.size = "medium"
    } else {
      pet.size = "large"
    }
    if(!pet.image){
      pet.image = "http://via.placeholder.com/400x300"
    }
        return(
          <PetTile
            key={pet.id}
            id={pet.id}
            name={pet.name}
            sex={pet.sex}
            size={pet.size}
            age={pet.age.toLowerCase()}
            location={pet.location}
            image={pet.image}
          />
        );
      });

    return (
    <div>
        <div className="row">
          <label id="filterLabel" htmlFor="zipCode">zipcode</label>
          <input
            id="zipCode"
            name="zipCode"
            className="zipCode"
            placeholder="zipcode"
            type="text"
            value={this.state.zipCode}
            onChange={this.updateZipCode}
          />

          <label id="filterLabel" htmlFor="typeFilter">type</label>
          <select className="typeFilter" id="typeFilter" name="typeFilter" onChange={this.updateType}>
            <option value="Dog">dog</option>
            <option value="Cat">cat</option>
          </select>

          <label id="filterLabel" htmlFor="sexFilter">sex</label>
          <select className="sexFilte" id="sexFilte" name="sexFilte" onChange={this.updateSex}>
            <option value="all">all</option>
            <option value="male">male</option>
            <option value="female">female</option>
          </select>
        </div>

        <div className="pets-container">
          {filter}
        </div>

  </div>

    );
  }
};

export default PetsIndexContainer;
